var GlobalPopulation
var GlobalModels

function init() {
     var populationPromise = $.getJSON("population.json");
     var modelsPromise = $.getJSON("models2.json");
     var countyPromise = $.getJSON("counties.json");
    // when both requests complete
    $.when(populationPromise, modelsPromise, countyPromise).then(function(population, models, county) {
    	//global.GlobalModels = models
    	//console.log( models)
      	ScatterPlot("#ScatterPlot1",population, models, 36);
      	ScatterPlot("#ScatterPlot2",population, models, 37);
      	ScatterPlot("#ScatterPlot3",population, models, 38);
      	ScatterPlot("#ScatterPlot4",population, models, 39);
      	ScatterPlot("#ScatterPlot5",population, models, 40);
      	ScatterPlot("#ScatterPlot6",population, models, 41);
      	ScatterPlot("#ScatterPlot7",population, models, 42);
      	ScatterPlot("#ScatterPlot8",population, models, 43);
      	CalenderPlot("#CalenderPlot", models, "007");
      	drawMap(models, county);
      	//createPlots(models)
    });
}
//init()
//console.log(global.GlobalModels)

//Create a tooltip
var tooltip = d3.select("#tooltip-map")
       .attr("class", "tooltip")
       .style("opacity", 0);

function drawMap(models, county){
	//countyData = county[0].features
	countyData = topojson.feature(county[0], county[0].objects.counties).features
	//console.log(countyData)
	AvgCheck = []
	ModelsData = models

	//Width and height
    	var width = $("#map-layer").width();
    	//console.log(width);
    	var height = $("#map-layer").height();
    	var center = [-87.623177, 41.881832];
    	var scale = 140;

    	var projection = d3.geoAlbersUsa()
        	.scale([200])
        	.translate([width/2, height/2]);
    	var path = d3.geoPath();

    	//Create SVG element
    	var svg = d3.select(".map")
        	.attr("height", height);

    	svg.append('g')
        	.selectAll('path')
        	.data(countyData)
        	.enter().append('path')
        	.attr("id", (item) =>{
        		return "path_" + parseInt(item["id"])
        	})
        	.attr('d', path)
        	.attr('vector-effect', 'non-scaling-stroke')
        	.attr('class', 'county')
        	.attr('stroke', '#000000')
        	.attr('fill', (item) => {
        		var CountyID = parseInt(item["id"])
        		//console.log(CountyID)
        		for (const [key, value] of Object.entries(models[0]["COVIDhub-ensemble"])) {
        			if(parseInt(key)==CountyID){
        				p = value
        				//console.log(key, value)
        				sumValue = 0
        				avgValue = 0
        				index = 0
        				NanVal = 0
        				for (const [key, value] of Object.entries(p)){
        					if(value["diff"]=="NaN")
        					{
        						value["diff"] = 0
        						NanVal = NanVal + 1;
        					}
        					sumValue = sumValue+value["diff"]
        					index = key
        					//console.log(sumValue)
        				}
        				index = index - NanVal;
        				avgValue = sumValue/index;
        				AvgCheck.push(avgValue)
        				//console.log(d3.max(AvgCheck))
        				if(avgValue<=-1300)
        				{
        					return "#67001f";
        				}
        				else if(avgValue>-1300 && avgValue<=-1000)
        				{
        					return "#b2182b";
        				}
        				else if(avgValue>-1000 && avgValue<=-500)
        				{
        					return "#d6604d";
        				}
        				else if(avgValue>-500 && avgValue<=-200)
        				{
        					return "#f4a582";
        				}
        				else if(avgValue>-200 && avgValue<=-150)
        				{
        					return "#fddbc7";
        				}
        				else if(avgValue>-150 && avgValue<=-100)
        				{
        					return "#f7f7f7";
        				}
        				else if(avgValue>-100 && avgValue<=0)
        				{
        					return "#d1e5f0";
        				}
        				else if(avgValue>0 && avgValue<=100)
        				{
        					return "#92c5de";
        				}
        				else if(avgValue>100 && avgValue<=200)
        				{
        					return "#4393c3";
        				}
        				else if(avgValue>200 && avgValue<=300)
        				{
        					return "#2166ac";
        				}
        				else if(avgValue>300)
        				{
        					return "#053061";
        				}
        			}
        				//console.log(value.length)
				}
        	})
        	.attr('data-fips', (item) => {
    			return item["id"];
			})
			.attr('data-Avg', (item) => {
    			let CountyID = item["id"];
    			for (const [key, value] of Object.entries(models[0]["COVIDhub-ensemble"])) {
        			if(parseInt(key)==CountyID){
        				p = value
        				//console.log(key, value)
        				sumValue = 0
        				avgValue = 0
        				//index = 0
        				for (const [key, value] of Object.entries(p)){
        					sumValue = sumValue+value["value"]
        					//index = key
        					//console.log(sumValue)
        				}
        				avgValue = sumValue/50;
        				return avgValue
        			}
        				//console.log(value.length)
				}
			})
        	.on('mouseover', function(d){
        		//console.log(d)
            	tooltip.transition()
                    	.duration(200)
                    	.style("opacity",0.9);
            	tooltip.html("County ID: \n" + d.id)  
                    	.style("left", (d3.event.pageX) + "px")   
                    	.style("top", (d3.event.pageY - 28) + "px");
        	})
        	.on("mouseout", function(d) {
                	tooltip.transition()
                    .duration(200)
                    .style("opacity", 0);

        	})
        	.on('click',function(d){

        		d3.selectAll(".county")
          		.style('stroke', '#636363')
                .style('stroke-width', "1px");

            	d3.selectAll(".clicked1")
                        .classed("clicked1", false)
                        .style('stroke', '#636363')
                        .style('stroke-width', "1px");

           		 d3.select(this)
                        .classed("clicked1", true)
                        .style('stroke', 'red')
                        .style('stroke-width', "3px");

                 d3.selectAll('.brushed').attr("class", "point");
               
            	var countySelect = d.id;
            	//console.log(countySelect)
            	/*d3.select("#point_"+parseInt(countySelect))
          		.style('stroke', 'red')
                .style('stroke-width', "3px");*/
            	CalenderPlot("#CalenderPlot", models, countySelect);


        	})

        	//Legend
        	d3.select(".map").append('g')
            .attr("width",40)
            .attr("height",60)
            .attr("class","text cancer-legend-heading")
            .append('text')
            .attr("x","85%")
            .attr("y","40%")
            .attr("font-size",'13px')
            .text('COVID-19 Average Error');

            var legendwAxis = width - width/8;
            var legendhAxis = height - height/1.7;
            //var colorRange = ["#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"]
            var colorRange = ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061", "#999999"]
            legendText = ['-1600', '-1300', '-1000', '-500', '-200', '-150', '-100', '0', '100', '200', '300', 'No Information']

            var key = d3.select(".map")
            .append("g")
            .attr("width",10)
            .attr("height",120)
            .attr("class","legend")
            .attr("transform", "translate(" + legendwAxis + ", " + legendhAxis + ")");

            for(var i=0;i<12;i++){
            	key.append("g:rect")
	            .attr("y", i*30)
	            .attr("height", 30)
	            .attr("width", 18)
	            .style("fill", colorRange[i])
                .style("opacity", "0.9");

                line = i*30

                 key.append("line")
                 	.attr("y", 32)
          			.attr("x1", -30)
          			.attr("x2", -12)
          			.attr("stroke", "#000")
          			.attr("transform", "translate(30, " + line + ")");

           		key.append("text")
                   .attr("y", (i* 30)+7)
                   .attr("x", 30)
                   .attr("dy", ".35em")
                   .style("text-anchor", "start")
                   .style("font" ,"12px sans-serif")
                   .text(String(legendText[i]));
            }

}

function CalenderPlot(container, models, countySelect){
	//console.log(countySelect)
	d3.selectAll('.Calender').remove()
	//d3.selectAll('.CalenderLgnd').remove()
	//d3.select('#CalenderLegend').remove()
	d3.selectAll('.x axis').remove()
	d3.selectAll('.y axis').remove()
	//d3.selectAll('.Cell').remove()

	var margin = {top: 5, right: 2, bottom: 5, left: 5},
    width = $(container).width() - margin.left - margin.right,
    height = $(container).height() - margin.top - margin.bottom;

    var itemSize = 12,
      	cellSize = itemSize - 1;

    var CalenderPlot = d3.select(container)
        .append("svg")
        .attr("width", $(container).width())
        .attr("height", $(container).height())
        .attr("class", "Calender")
        .append("g")
        .attr("transform", "translate(180,45)");

    CalenderPlot.append("text")
                .attr("y", -40)
                .attr("x", "30%")
                .attr("dy", ".40em")
                .style("text-anchor", "start")
                .style("font" ,"12px sans-serif")
                .text("Weeks");

    if(countySelect!="007"){
    	CalenderPlot.append("text")
                .attr("y", 450)
                .attr("x", "25%")
                .attr("dy", ".40em")
                .style("text-anchor", "start")
                .style("font" ,"18px sans-serif")
                .text("County: " + countySelect);
    }
 

        //attr("transform", "translate(" + margin.left + "," + margin.top + ")");
       /* p = 0;
        console.log(models[0]["COVIDhub-ensemble"]["1001"][p])*/

    var Calenderdata = []

    if(countySelect=="007"){
    	for (week=0; week<=65; week++)
		{
			for(model in models[0]){
				s = 0
				var k = 0
				for(county in models[0][model]){
					//console.log(county, week, models[0][model][county][week].diff)
					if(!isNaN(models[0][model][county][week].diff)){
						s = s + models[0][model][county][week].diff;
					}
					k = k+1;
					b = s/k;
					if(b==0){
						b = "NaN"
					}
				}
				Calenderdata.push({"model": model, "county": county, "week": week, "error": b})
			}
		}
    }
    else{
    	   for(var model in models[0]){
    			for(var county in models[0][model]){
    				for(var week in models[0][model][county]){
    					Calenderdata.push({"model": model, "county": county, "week": week, "error": models[0][model][county][week].diff})
    				}
    			}
    		}
    }
    //console.log(Calenderdata)

    var x_elements = d3.set(Calenderdata.map(function( item ) { return item.week; } )).values(),
        y_elements = d3.set(Calenderdata.map(function( item ) { return item.model; } )).values();

	//var checkVal = d3.max(Calenderdata, d => d.error)
	//var checkValmin = d3.min(Calenderdata, d => d.error)
	//console.log(checkVal, checkValmin)

    var xScale = d3.scaleBand()
        	.domain(x_elements)
        	.range([0, x_elements.length * itemSize]);

    var xAxis = d3.axisTop(xScale)
        	.tickFormat(function (d) {
            	return d;
        	})
        	

    var yScale = d3.scaleBand()
        	.domain(y_elements)
        	.range([0, y_elements.length * itemSize]);

    var yAxis = d3.axisLeft(yScale)
        	.tickFormat(function (d) {
            	return d;
        	})

    for(var NaNVal in Calenderdata){
    	//console.log(typeof Calenderdata[NaNVal].error)
    	if(isNaN(Calenderdata[NaNVal].error)){
    		Calenderdata[NaNVal].error = 100000;
    	}
    }
        	

    var colorScale = d3.scaleThreshold()
        	.domain([-1300, -1000, -500, -200, -150, -100, 0, 100, 500, 1500, 100000])
        	.range(["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061", "#999999"]);

    var tooltipClenderPlot = d3.select("#tooltipClenderPlot")
            .attr("class", "tooltip")
            .style("opacity", 0);

    newData = []
    if(countySelect != "007")
    {
    	for(var j in Calenderdata){
    		if(parseInt(Calenderdata[j].county)==parseInt(countySelect)){
    		//console.log(Calenderdata[j])

    			newData.push(Calenderdata[j])
    		
    		}
    	}

    }
    else{
    	newData = Calenderdata
    }

   

    var cells = CalenderPlot.selectAll('rect')
        	.data(newData)
        	.enter().append('g').append('rect')
        	.attr('class', 'cell')
        	.attr('width', cellSize)
        	.attr('height', cellSize)
        	.attr('y', function(d) { return yScale(d.model); })
        	.attr('x', function(d) { return xScale(d.week); })
        	.attr('fill', function(d) { return colorScale(d.error); })
        	.attr('stroke', 'black')
        	.attr('stroke-width', '0.3px')
        	.on("mouseover", function(d) {
        		if(d.error==100000)
        		{
        			errorVal = "No Information";
        		}
        		else{
        			errorVal = d.error;
        		}
        		tooltipClenderPlot.transition()
                   .duration(200)
                   .style("opacity", .9);
                 tooltipClenderPlot.html("Model name: " + d.model + "<br/>" +
                            "Error:"  + errorVal + "<br/>" +
                            "Week:"  + d.week + "<br/>")
                   .style("left", (d3.event.pageX + 5) + "px")
                   .style("top", (d3.event.pageY - 28) + "px");
        	})
        	.on("mouseout", function(d) {
              tooltipClenderPlot.transition()
                   .duration(500)
                   .style("opacity", 0);
          	});

        	CalenderPlot.append("g")
        		.attr("class", "y axis")
        		.call(yAxis)
        		.selectAll('text')
        		.attr('font-weight', 'normal');

    		CalenderPlot.append("g")
        		.attr("class", "x axis")
        		.call(xAxis)
        		.selectAll('text')
        		.attr('font-weight', 'normal')
        		.style("text-anchor", "start")
        		.attr("dx", ".8em")
        		.attr("dy", ".5em")
        		.attr("transform", function (d) {
            		return "rotate(-65)";
        		});

}
/*function CalenderLegend(){

	var CalLgndTxt = ["-10000", "-5000", "-100", "0", "100", "200", "1000", "10000", "20000", "40000", "No Information"]
    var CalLgndColor = ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061", "#999999"]

    var CalenderLegend1 = d3.select("#CalenderLegend")
        .append('svg')
        .attr("width", 100)
        .attr("height", $("#CalenderLegend").height())
        .append("g")
        .attr("class", "CalenderLgnd")
        .attr("transform", function(d, i) { return "translate(10," + (60 + i * 20) + ")"; });


    for (var i = 0; i < CalLgndColor.length; i++) {
        CalenderLegend1.append("g:rect")
	        .attr("y", i*25)
	        .attr("height", 25)
	        .attr("width", 20)
	        .style("fill", CalLgndColor[i])
            .style("opacity", "1")
            .attr('stroke', 'black')
        	.attr('stroke-width', '0.3px');


        CalenderLegend1.append("text")
            .attr("y", (i* 25)+10)
            .attr("x", 25)
            .attr("dy", ".40em")
            .style("text-anchor", "start")
            .style("font" ,"10px sans-serif")
            .text(String(CalLgndTxt[i]));
    };
}*/

//CalenderLegend()

function ScatterPlot(container, population, models, week){

	var margin = {top: 20, right: 10, bottom: 22, left: 5},
    width = $(container).width() - margin.left - margin.right-15,
    //height = 600- margin.top - margin.bottom;
    height = $(container).height() - margin.top - margin.bottom;

    //var xValue = function(d) { return d.value;}, // data -> value
    //console.log(models)
    //console.log(models[0]["COVIDhub-ensemble"]["1003"][0].diff)
   /* var Checkdata = []
    for(var county1 in models[0]["COVIDhub-ensemble"])
    {
    	console.log(models[0]["COVIDhub-ensemble"][county1][55])
    }*/

    var data = []
    for(var county in models[0]["COVIDhub-ensemble"]){
    	data.push({"CountyID": county, "population": population[0][county], "value": models[0]["COVIDhub-ensemble"][county][week].diff, "normalized":
    		models[0]["COVIDhub-ensemble"][county][week].diff/population[0][county]})
    }
    //console.log(data.filter(data, d => !isNaN(d.value)))
    var FilteredData = []
    FilteredData = data.filter(function(d) {return ! isNaN(d.value);})
    //console.log(data)

    let maxPopulation = d3.max(Object.values(population[0]))
    let minPopulation = d3.min(Object.values(population[0]))
    var xScale = d3.scaleLog().range([0, width]).domain([minPopulation, maxPopulation]); // value -> display
    var xAxis = d3.axisBottom(xScale).ticks(10);

    var yMax = d3.max(FilteredData, d => d.normalized)
    var yMin = d3.min(FilteredData, d => d.normalized)
    //console.log(yMin, yMax, maxPopulation)
    var yScale = d3.scaleLinear().range([height, 0]).domain([yMin, yMax]); // value -> display
    var yAxis = d3.axisLeft(yScale).ticks(10);

    var ScatterPlot = d3.select(container)
        .append("svg")
        .attr("width", $(container).width())
        .attr("height", $(container).height())
        .attr("class", "ScatterPlotClass")
        .append("g")
        .attr("transform", "translate(37,-2)");

     var tooltipScatterlot = d3.select("#tooltip_ScatterPlot")
            .attr("class", "tooltip")
            .style("opacity", 0);

    var x_axis = ScatterPlot.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis)
          .append("text")
          .attr("class", "label")
          .attr("x", width)
          .attr("y", 25)
          .style("text-anchor", "end")
          .text("Populationn");

      // y-axis
      axis = width-520;
      var y_axis = ScatterPlot.append("g")
          .attr("class", "y axis")
          .call(yAxis)
          .append("text")
          .attr("class", "label")
          .attr("transform", "rotate(-90)")
          .attr("x", 0)
          .attr("y", 15)
          .attr("dy", ".71em")
          .style("text-anchor", "end")
          .text("Normalized v");

        // draw dots .attr("transform", "translate(" + axis + ", 5)")  .attr("transform", "translate(0," + height + ")")
      var circles = ScatterPlot.selectAll("circle")
          .data(FilteredData)
          .enter().append("circle")
          .attr("class", "point")
          .attr("id", function(d){
          	return "point_" + week;
          })
          .attr("cx", d=> xScale(d.population))
          .attr("cy", d=> yScale(d.normalized))
          .attr("r", 3)
          .attr("fill", "#4393c3")
          .attr("stroke", "black")
          .on("mouseover", function(d) {
        		tooltipScatterlot.transition()
                   .duration(200)
                   .style("opacity", .9);
                 tooltipScatterlot.html("County: " + d.CountyID + "<br/>" +
                            "Population: "  + d.population + "<br/>" +
                            "Normalized Error:"  + d.normalized + "<br/>")
                   .style("left", (d3.event.pageX + 5) + "px")
                   .style("top", (d3.event.pageY - 28) + "px");
        	})
        	.on("mouseout", function(d) {
              tooltipScatterlot.transition()
                   .duration(500)
                   .style("opacity", 0);
          	})
          

       var WeekName = ScatterPlot.append("g")
            .attr("width",40)
            .attr("height",70)
            .attr("class","text cancer-legend-heading")
            .append('text')
            .attr("x","55%")
            .attr("y","82%")
            .attr("font-size",'15px')
            .text('Week:' +" "+ week);

			function selectpoint()
			{
				if (d3.event.selection != null) {
					//console.log(circles)
					//co.attr("class", "point");
					//console.log(co)

                    // revert circles to initial style
                    circles.attr("class", "point");
                    d3.selectAll(".county")
          				.style('stroke', '#636363')
                		.style('stroke-width', "1px");

                    var brush_coords = d3.brushSelection(this);

                    // style brushed circles
                     co = circles.filter(function (){

                               var cx = d3.select(this).attr("cx"),
                                   cy = d3.select(this).attr("cy");

                               return isBrushed(brush_coords, cx, cy);
                           })
                           co.attr("class", "brushed");
                }
			}

			function isBrushed(brush_coords, cx, cy) {

             	var x0 = brush_coords[0][0],
                	 x1 = brush_coords[1][0],
                 	y0 = brush_coords[0][1],
                	 y1 = brush_coords[1][1];

           		 return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
        	}

        	function Selectcounty(){
        		//console.log("Hi")
        		// disregard brushes w/o selections  
                // ref: http://bl.ocks.org/mbostock/6232537
                if (!d3.event.selection) return;

                // programmed clearing of brush after mouse-up
                // ref: https://github.com/d3/d3-brush/issues/10
                d3.select(this).call(brush.move, null);

                var d_brushed =  d3.selectAll(".brushed").data();
                //console.log(d_brushed)

                // populate table if one or more elements is brushed
                if (d_brushed.length > 0) {
                    d3.selectAll(".county")
          				.style('stroke', '#636363')
                		.style('stroke-width', "1px");
                    d_brushed.forEach(d_row => HighlightMap(d_row))
                } else {
                   d3.selectAll(".county")
          				.style('stroke', '#636363')
                		.style('stroke-width', "1px");
                }
        	}

        	var brush = d3.brush()
			                  .on("brush", selectpoint)
			                  .on("end", Selectcounty);
			ScatterPlot.append("g")
						.call(brush);

			function HighlightMap(d_row) {
            	d3.select("#path_"+parseInt(d_row.CountyID))
          		.style('stroke', 'red')
                .style('stroke-width', "3px");
        	}


        
}



function createPlots(models){
	//console.log(models[0])
	/*for (const [county, value] of Object.entries(models[0]["COVIDhub-ensemble"])){
		
	}*/
	/*ayhay = []
	for (week=0; week<1; week++)
	{
		for(model in models[0]){
			s = 0
			var k = 0
			for(county in models[0][model]){
				s = s + models[0][model][county][week].diff;
				k = k+1;
			}
			ayhay.push({"model": model, "county": county, "week": week, "error": s/k})
		}
	}
	console.log(ayhay)*/
	for(week=0;week<66;week++){
		for(county in models[0]["COVIDhub-baseline"]){
			console.log(models[0]["COVIDhub-baseline"][county][week].diff)
		}
	}
}

//createPlots()


window.onload = init()